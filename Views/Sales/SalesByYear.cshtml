@using SalesForecasting.Services
@model IEnumerable<SalesByState>

<h1>sales for year @ViewBag.year</h1>

<h2>total sales: @ViewBag.totalsales</h2>

<table class="table">
    <thead>
        <tr>
            <th>State</th>
            <th>Total Sales</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.State</td>
                <td>@item.TotalSales.ToString("C")</td>
            </tr>
        }
    </tbody>
</table>

 @* @using SalesForecasting.Services
 @model IEnumerable<SalesByState>

<h1>Sales for Year @ViewBag.Year</h1>

<h2>Total Sales: @ViewBag.TotalSales.ToString("C")</h2>

<div>
    <label for="percentageIncrease">Percentage Increase: </label>
    <input type="number" id="percentageIncrease" value="10" />
    <button onclick="loadChart(@ViewBag.Year)">Apply</button>
</div>

<canvas id="salesChart" width="400" height="200"></canvas>

<script>
    function loadChart(year) {
        const percentageIncrease = document.getElementById('percentageIncrease').value;
        fetch(`/Sales/SalesAndForecastedChart?year=${year}&percentageIncrease=${percentageIncrease}`)
            .then(response => response.json())
            .then(data => {
               

                const states = data.ActualSales.map(s => s.State);
                const actualSales = data.ActualSales.map(s => s.totalSales);
                const forecastedSales = data.ForecastedSales.map(s => s.totalSales);

                const ctx = document.getElementById('salesChart').getContext('2d');
                new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: states,
                        datasets: [{
                            label: 'Actual Sales',
                            data: actualSales,
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Forecasted Sales',
                            data: forecastedSales,
                            backgroundColor: 'rgba(153, 102, 255, 0.2)',
                            borderColor: 'rgba(153, 102, 255, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            })
            .catch(error => console.error('Error fetching data:', error));
    }

    document.getElementById('applyButton').addEventListener('click', function () {
        loadChart(year);
    });

    
    loadChart(year);

</script> *@
